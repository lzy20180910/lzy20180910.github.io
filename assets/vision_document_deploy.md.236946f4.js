import{_ as e,c as l,C as n,U as o,x as a,o as p,D as t}from"./chunks/framework.6b6d2f85.js";const b=JSON.parse('{"title":"部署","description":"","frontmatter":{},"headers":[],"relativePath":"vision/document/deploy.md","lastUpdated":1683254198000}'),c={name:"vision/document/deploy.md"},r=o('<h1 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h1><p>当你完成了自己的<code>vitepress</code>项目后，可以利用<code>GitHub Pages</code>来部署自己的项目，利用<code>Github Actions</code>来做持续集成</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>如果你想把自己的<code>vitepress</code>项目部署到<code>GitHub Pages</code>上，需要在<code>docs/.vitepress/config.js</code>中设置正确的 <code>base</code>。 如果你想部署到 <code>https://&lt;USERNAME or GROUP&gt;.github.io/</code>, 你可以省略这一步，因为 <code>base</code> 默认为 <code>&#39;/&#39;</code>。</p><p>如果你想部署到 <code>https://&lt;USERNAME or GROUP&gt;.github.io/&lt;REPO&gt;/</code>, 比如你的仓库是 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>, 那么需要设置<code>base</code> 为 <code>&#39;/&lt;REPO&gt;/&#39;</code>。</p><h2 id="github-pages" tabindex="-1">GitHub Pages <a class="header-anchor" href="#github-pages" aria-label="Permalink to &quot;GitHub Pages&quot;">​</a></h2><p>在GitHub上，仓库命名如果为<code>&quot;用户名.github.io&quot;</code>，那么该仓库就默认为一个<code>GitHub Pages</code>应用，默认就可以直接通过<code>&quot;用户名.github.io&quot;</code>去访问该仓库下<code>master</code>的<code>index.html</code>文件。我们可以创建一个<code>gh-pages</code>分支专门用来存放打包好的项目资源，并配置访问<code>&quot;用户名.github.io&quot;</code>时是访问该分支上的内容，配置位置如下图：</p>',7),i=o('<p>一个仓库命名非<code>&quot;用户名.github.io&quot;</code>格式的<code>github</code>仓库默认不是一个<code>GitHub Pages</code>应用，如果要设置成<code>GitHub Pages</code>应用，方法跟上图一样，然后假设你的仓库名为<code>test</code>，那么访问地址为<code>&quot;用户名.github.io/test&quot;</code></p><h2 id="github-actions" tabindex="-1">Github Actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to &quot;Github Actions&quot;">​</a></h2><p>如果我们每次改完东西都要重新打包项目，再把打包后的产物提交到<code>gh-pages</code>分支上，这无疑是一件非常费时效率低下的事情。如果可以每次修改完代码push到master分支后，github就能帮我们自动打包并且部署到<code>gh-pages</code>分支上，这样的持续集成是不是非常的赞呢？<code>Github Actions</code>就是用来做这件事的！</p><ul><li><p>1.首先呢我们先新建一个空分支，命名为gh-pages，执行git checkout --orphan gh-pages来生成，--orphan参数的作用是该分支会包含父分支的所有文件，但该分支不会指向任何以前的提交，就是它没有历史。然后执行git rm -rf .（注意这边有个点“.”）来删除所有文件(想要空分支，所以需要把当前内容全部删除)，然后你可以随便建个文件，比如README.md文件，里面随便写点啥，然后git add .跟git commit -m &#39;一些描述&#39;，然后git push --set-upstream origin gh-pages推送到远程分支，这样子你这个分支就会在远程仓库里</p></li><li><p>2.弄这个分支是要干什么呢？因为很多github pages应用都会特意弄这么一个分支，然后在点开你对应的仓库，在Settings-&gt;Pages-&gt;Branch下，下拉选择为gh-pages分支然后save保存，这样子呢当你访问“用户名.github.io”的时候就会去访问你这个gh-pages分支下的index.html，你master分支是不是就可以用来管理你的项目？这样是不是就分开了</p></li></ul>',4),y=a("ul",null,[a("li",null,"3.接着我们还需要一个去生成一个Personal access tokens秘钥，Settings->Developer settings->Personal access tokens->Generate new token，生成tokens要保留起来，下次进来这个tokens就看不到了")],-1),D=a("ul",null,[a("li",null,"4.然后拿到tokens后，就点开仓库，在Settings->Secrets->Actions->New repository secret添加一个变量，这个变量等下会用到")],-1),d=o(`<ul><li>5.接下来就可以设置github actions了，先在仓库下点开Actions，然后点击New workflow，再点击Suggested for this repository 下的Configure，然后把里面的内容替换成下面的内容：</li></ul><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Node.js CI</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># action名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9CAC;">on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">branches</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">master</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 监听master分支的push事件，每次push都会执行下面的命令</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">jobs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">runs-on</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">steps</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Use Node.js 16</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">actions/setup-node@v3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 安装node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">node-version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">16.x</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># node版本</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">cache</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yarn</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yarn install</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yarn docs:build</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 构建命令</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># 部署</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Deploy</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">peaceiris/actions-gh-pages@v2.5.0</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># 前面生成的token秘钥</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">PERSONAL_TOKEN</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">\${{ secrets.DEPLOY_KEY }}</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># 打包后提交到哪个分支</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">PUBLISH_BRANCH</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gh-pages</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;"># 生成文件的目录，打包后会把代码部署到上面指定的gh-pages分支中去</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">PUBLISH_DIR</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./docs/.vitepress/dist</span></span>
<span class="line"></span></code></pre></div>`,2);function C(A,u,g,F,h,_){const s=t("Gimage");return p(),l("div",null,[r,n(s,{src:"/vision/document/deploy/img1.png"}),i,n(s,{src:"/vision/document/deploy/img2.png"}),y,n(s,{src:"/vision/document/deploy/img3.png"}),n(s,{src:"/vision/document/deploy/img4.png"}),n(s,{src:"/vision/document/deploy/img5.png"}),n(s,{src:"/vision/document/deploy/img6.png"}),n(s,{src:"/vision/document/deploy/img7.png"}),D,n(s,{src:"/vision/document/deploy/img8.png"}),n(s,{src:"/vision/document/deploy/img9.png"}),d])}const E=e(c,[["render",C]]);export{b as __pageData,E as default};
