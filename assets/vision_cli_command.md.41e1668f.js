import{_ as a,c as l,C as o,U as c,x as s,a as n,o as d,D as p}from"./chunks/framework.6b6d2f85.js";const x=JSON.parse('{"title":"创建你的第一个命令行工具","description":"","frontmatter":{},"headers":[],"relativePath":"vision/cli/command.md","lastUpdated":1699513056000}'),t={name:"vision/cli/command.md"},i=c(`<h1 id="创建你的第一个命令行工具" tabindex="-1">创建你的第一个命令行工具 <a class="header-anchor" href="#创建你的第一个命令行工具" aria-label="Permalink to &quot;创建你的第一个命令行工具&quot;">​</a></h1><p>像<code>vue-cli</code>脚手架只需要在控制台输一行命令就可以帮我们快速生成一个项目，掌握如何开发命令行工具可以帮助我们高效的开发，本节通过一个简单的demo教你如何用<code>nodejs</code>写一个命令行工具</p><h2 id="创建命令" tabindex="-1">创建命令 <a class="header-anchor" href="#创建命令" aria-label="Permalink to &quot;创建命令&quot;">​</a></h2><p>第一步就是先创建一个可以在命令行工具里全局执行的命令，步骤如下：</p><ul><li>1.创建一个文件夹，然后<code>npm init -y</code>，生成<code>package.json</code>文件</li><li>2.在新建的文件夹下再创建一个<code>index.js</code>文件</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">#</span><span style="color:#89DDFF;">!/</span><span style="color:#A6ACCD;">usr</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">env node</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>添加<code>#!/usr/bin/env node</code>，这是告诉系统，下面这个脚本，使用<code>nodejs</code>来执行，这行也是必须加的</p><ul><li>3.添加<code>package.json</code>的<code>bin</code>字段。</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hello-cli</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>bin</code>字段里面写上这个命令行的名字，也就是<code>hello-cli</code>，它告诉<code>npm</code>，里面的<code>index.js</code>脚本可以通过命令行的方式执行，以<code>hello-cli</code>的命令调用。当然命令行的名字你想写什么都是你的自由。<br> 在当前<code>package.json</code>目录下，打开命令行工具，执行<code>npm link</code>，<code>npm</code>检测到<code>package.json</code>里面存在一个<code>bin</code>字段，会将当前的代码在<code>npm</code>全局<code>node_modules</code>目录下留个快捷方式，同时在全局<code>npm</code>包目录下生成对应的可执行文件：</p>`,10),r=c("<p>当我们在系统命令行直接执行<code>hello-cli</code>的时候，实际上就是执行<code>index.js</code>脚本。<br> 因为安装<code>node</code>的时候，<code>npm</code>将这个目录配置为系统变量环境了，当你执行命令的时候，系统会先找系统命令和系统变量，然后到变量环境里面去查找这个命令名，然后找到这个目录后，发现匹配上了该命令名的可执行文件，接着就直接执行它。<code>vue-cli</code>也好，<code>webpack-cli</code>也好，都是这样执行的。<br> 然后在控制台上执行<code>hello-cli</code>：</p>",1),_=c('<p>这是通过<code>npm link</code>创建全局命令的方式，这样的方式适合在开发的时候测试用，这样的方式就不需要每次修改代码后都要重新发布到<code>npm</code>再重新安装。<br> 等到脚手架构建完毕后发布到<code>npm</code>上后，就可以通过<code>npm install xxx -g</code>的方式全局安装，跟<code>npm link</code>的区别是这会不只是在<code>npm</code>全局<code>node_modules</code>目录生成快捷方式，而是会把整个项目安装在<code>node_modules</code>下，如果是通过<code>npm install xxx --save</code>局部安装的话，只能通过<code>npm run script</code>的方式调用命令。</p><h2 id="获取命令参数" tabindex="-1">获取命令参数 <a class="header-anchor" href="#获取命令参数" aria-label="Permalink to &quot;获取命令参数&quot;">​</a></h2><p>到了这里已经创建出了一个我们自定义的可以在系统命令行执行的命令，那么我们知道一个命令往往后面都会带上一些参数，比如<code>vue-cli</code>创建<code>vue</code>项目模板的指令<code>vue create xxx</code>，那么我们的命令执行脚本要如何获取后面的参数呢？<br> 通过<code>node</code>中的<code>process.argv</code>即可获得，我们输入<code>hello-cli create template</code>打印一下看看：</p>',3),m=s("p",null,[n("会打印出一个数组，前面两个是固定的，一个是"),s("code",null,"node"),n("所在的执行路径，一个是当前脚本的路径，多出来的就是命令后面跟着的额外的参数，拿到参数之后我们就可以做很多事情了，比如我们改下"),s("code",null,"index.js"),n("中的内容：")],-1),D=s("p",null,[n("然后输入"),s("code",null,"hello-cli Michael"),n("，控制台就会打印出：")],-1);function u(y,h,C,F,A,g){const e=p("Gimage");return d(),l("div",null,[i,o(e,{src:"/vision/cli/command/img1.png"}),r,o(e,{src:"/vision/cli/command/img2.png"}),_,o(e,{src:"/vision/cli/command/img3.png"}),m,o(e,{src:"/vision/cli/command/img4.png"}),D,o(e,{src:"/vision/cli/command/img5.png"})])}const b=a(t,[["render",u]]);export{x as __pageData,b as default};
