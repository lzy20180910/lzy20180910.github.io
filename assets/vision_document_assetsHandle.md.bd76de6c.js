import{_ as e,c as o,o as s,U as a}from"./chunks/framework.6b6d2f85.js";const b=JSON.parse('{"title":"静态资源处理","description":"","frontmatter":{},"headers":[],"relativePath":"vision/document/assetsHandle.md","lastUpdated":1699513056000}'),c={name:"vision/document/assetsHandle.md"},n=a(`<h1 id="静态资源处理" tabindex="-1">静态资源处理 <a class="header-anchor" href="#静态资源处理" aria-label="Permalink to &quot;静态资源处理&quot;">​</a></h1><p>所有的Markdown文件都通过Vite处理编译成Vue组件。你可以并且应当使用相对URL引用静态资源。</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">![</span><span style="color:#C3E88D;">An image</span><span style="color:#89DDFF;">](</span><span style="color:#A6ACCD;text-decoration:underline;">./image.png</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>你可以在你的<code>Markdown</code>文件、<code>*.vue</code>组件、样式和纯<code>.css</code>文件使用绝对公共路径(基于项目根目录)或相对路径(基于你的文件系统)。<br> 所有被引用的静态资源，包括使用绝对路径的资源，在生产构建中会被复制到<code>dist</code>文件夹中，并重命名为<code>hash</code>文件名的文件。没有被引用的静态资源会被被复制。类似于<code>vue-cli</code>，小于<code>4kb</code>的图片资源会转化为内联的<code>base64</code>字符。<br> 所有静态路径引用，包括绝对路径，应当基于你的工作目录结构。</p><h2 id="公共文件" tabindex="-1">公共文件 <a class="header-anchor" href="#公共文件" aria-label="Permalink to &quot;公共文件&quot;">​</a></h2><p>有时候，你可能需要提供在你的<code>Markdown</code>或主题文件都没有直接引用的静态资源(如favicons和PWA 图标)。在项目根目录下的<code>public</code>目录可以用作转换舱口提供在源代码中没有引用的静态资源(如robots.txt)或必须保留完全相同文件名(没有<code>hash</code>)的文件。</p><p>存放在<code>public</code>下的静态资源将原样复制到<code>dist</code>目录的根目录。<br></p><p>注意，你应该使用根绝对路径引用放置在<code>public</code>文件夹中的文件。例如，文件<code>public/icon.png</code>在源代码中应该始终作为<code>/icon.png</code>被引用。<br></p><h2 id="基础-url" tabindex="-1">基础 URL <a class="header-anchor" href="#基础-url" aria-label="Permalink to &quot;基础 URL&quot;">​</a></h2><p>如果你的站点部署在非根<code>URL</code>，你需要在 <code>docs/.vitepress/config.js</code>中设置<code>base</code>选项。例如，如果你计划部署你的站点到<code>https://foo.github.io/bar/</code>，<code>base</code>选项就应该设置为<code>&#39;/bar/&#39;</code>(始终以/开始和结尾)。<br></p><p>设置基础<code>URL</code>后，为了引用<code>public</code>中的图像，你就需要使用类似<code>/bar/image.png</code>的<code>URL</code>。 但是，当你觉得改变<code>base</code>值时，这样会很脆弱。 为此，<code>VitePress</code>提供了一个内置的助手<code>$withBase</code>(注入在<code>Vue</code>原型上)，用于生成正确的路径：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$withBase(&#39;/foo.png&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>注意，你不仅可以在主题组件中使用以上语法，还可以在Markdown文件中使用。</p>`,13),t=[n];function d(l,p,r,i,h,u){return s(),o("div",null,t)}const F=e(c,[["render",d]]);export{b as __pageData,F as default};
